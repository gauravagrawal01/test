openapi: 3.1.0
info:
  title: PAPI API
  description: API for PAPI endpoints.
  version: 1.0.0
contact:
  name: MXP Team

security:
  - Bearer: []
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  CreateWorkspace:
    additionalProperties: false
    properties:
      $schema:
        description: A URL to the JSON Schema for this object.
        examples:
          - https://example.com/schemas/CreateWorkspace.json
        format: uri
        readOnly: true
        type: string
      contributors:
        items:
          type: string
        type:
          - array
          - 'null'
        uniqueItems: true
      description:
        maxLength: 200
        pattern: ^[a-zA-Z0-9., ]*$
        type: string
      name:
        maxLength: 20
        minLength: 3
        pattern: ^[a-z0-9-]+$
        patternDescription: alphanumeric between 3 and 20 characters
        type: string
      owners:
        items:
          type: string
        minItems: 2
        type:
          - array
          - 'null'
        uniqueItems: true
      readers:
        items:
          type: string
        type:
          - array
          - 'null'
        uniqueItems: true
    required:
      - name
      - owners
      - contributors
      - readers
    type: object
  Workspace:
    additionalProperties: false
    examples:
      - id: '000000000000000000000000'
        createdAt: '2024-05-17T07:37:03.000000342Z'
        name: apme
        description: A project making everything
        owners:
          - jane.example@cariad.technology
          - john.example@cariad.technology
        contributors:
          - maria.example@cariad.technology
        readers:
          - markus.example@cariad.technology
    properties:
      $schema:
        description: A URL to the JSON Schema for this object.
        examples:
          - https://example.com/schemas/Workspace.json
        format: uri
        readOnly: true
        type: string
      contributors:
        items:
          type: string
        type:
          - array
          - 'null'
        uniqueItems: true
      createdAt:
        format: date-time
        type: string
      description:
        maxLength: 200
        pattern: ^[a-zA-Z0-9., ]*$
        type: string
      id:
        type: string
        maxLength: 24
        minLength: 24
      name:
        maxLength: 20
        minLength: 3
        pattern: ^[a-z0-9-]+$
        patternDescription: alphanumeric between 3 and 20 characters
        type: string
      owners:
        items:
          type: string
        minItems: 2
        type:
          - array
          - 'null'
        uniqueItems: true
      readers:
        items:
          type: string
        type:
          - array
          - 'null'
        uniqueItems: true
    required:
      - createdAt
      - name
      - owners
      - contributors
      - readers
    type: object
  CreateNamespace:
    type: object
    required:
      - name
      - description
      - workspace
      - cluster
      - owners
      - contributors
      - readers
    properties:
      name:
        type: string
        maxLength: 20
        minLength: 3
        pattern: ^[a-z0-9-]+$
        description: Name of the namespace (3-20 characters, lowercase, hyphen-separated)
      description:
        type: string
        maxLength: 200
        pattern: ^[a-zA-Z0-9., ]*$
        description: Description of the namespace (max 200 characters)
      workspace:
        type: string
        pattern: ^[a-z0-9-]+ \([a-zA-Z0-9]{24}\)$
        description: Workspace associated with the namespace
      cluster:
        type: string
        description: Kubernetes cluster where the namespace will be created
      owners:
        type: array
        uniqueItems: true
        minItems: 2
        items:
          type: string
          format: email
          description: Email addresses of the namespace owners
      contributors:
        type: array
        uniqueItems: true
        items:
          type: string
          format: email
          description: Email addresses of the namespace contributors
      readers:
        type: array
        uniqueItems: true
        items:
          type: string
          format: email
          description: Email addresses of the namespace readers
  Namespace:
    type: object
    required:
      - id
      - createdAt
      - name
      - description
      - workspace
      - cluster
      - owners
      - contributors
      - readers
    properties:
      id:
        type: string
        maxLength: 24
        minLength: 24
        description: Unique identifier of the namespace
      createdAt:
        type: string
        format: date-time
        description: Timestamp when the namespace was created
      name:
        type: string
        maxLength: 20
        minLength: 3
        pattern: ^[a-z0-9-]+$
        description: Name of the namespace (3-20 characters, lowercase, hyphen-separated)
      description:
        type: string
        maxLength: 200
        pattern: ^[a-zA-Z0-9., ]*$
        description: Description of the namespace (max 200 characters)
      workspace:
        type: string
        description: Workspace associated with the namespace
      cluster:
        type: string
        description: Kubernetes cluster where the namespace is created
      owners:
        type: array
        uniqueItems: true
        minItems: 2
        items:
          type: string
          format: email
          description: Email addresses of the namespace owners
      contributors:
        type: array
        uniqueItems: true
        items:
          type: string
          format: email
          description: Email addresses of the namespace contributors
      readers:
        type: array
        uniqueItems: true
        items:
          type: string
          format: email
          description: Email addresses of the namespace readers
  CreateDomain:
    type: object
    required:
      - name
      - description
      - workspace
      - owners
      - contributors
      - readers
    properties:
      name:
        type: string
        maxLength: 253
        minLength: 3
        pattern: ^[a-z0-9][a-z0-9.-]*[a-z0-9]$
        description: Domain name (RFC 1123 compliant, max 253 characters)
      description:
        type: string
        maxLength: 200
        pattern: ^[a-zA-Z0-9., ]*$
        description: Description of the domain (max 200 characters)
      workspace:
        type: string
        pattern: ^[a-z0-9-]+ \([a-zA-Z0-9]{24}\)$
        description: Workspace associated with the domain
      owners:
        type: array
        uniqueItems: true
        minItems: 2
        items:
          type: string
          format: email
          description: Email addresses of the domain owners
      contributors:
        type: array
        uniqueItems: true
        items:
          type: string
          format: email
          description: Email addresses of the domain contributors
      readers:
        type: array
        uniqueItems: true
        items:
          type: string
          format: email
          description: Email addresses of the domain readers
  Domain:
    type: object
    required:
      - id
      - createdAt
      - name
      - description
      - workspace
      - owners
      - contributors
      - readers
    properties:
      id:
        type: string
        maxLength: 24
        minLength: 24
        description: Unique identifier of the domain
      createdAt:
        type: string
        format: date-time
        description: Timestamp when the domain was created
      name:
        type: string
        maxLength: 253
        minLength: 3
        pattern: ^[a-z0-9][a-z0-9.-]*[a-z0-9]$
        description: Domain name (RFC 1123 compliant, max 253 characters)
      description:
        type: string
        maxLength: 200
        pattern: ^[a-zA-Z0-9., ]*$
        description: Description of the domain (max 200 characters)
      workspace:
        type: string
        description: Workspace associated with the domain
      owners:
        type: array
        uniqueItems: true
        minItems: 2
        items:
          type: string
          format: email
          description: Email addresses of the domain owners
      contributors:
        type: array
        uniqueItems: true
        items:
          type: string
          format: email
          description: Email addresses of the domain contributors
      readers:
        type: array
        uniqueItems: true
        items:
          type: string
          format: email
          description: Email addresses of the domain readers
  CreateCertificate:
    type: object
    required:
      - name
      - description
      - domainIds
      - provider
      - owners
      - contributors
      - readers
    properties:
      name:
        type: string
        maxLength: 250
        minLength: 3
        pattern: ^[a-z0-9][a-z0-9.-]*[a-z0-9]$
        description: Name of the certificate (3-250 characters, lowercase, hyphen-separated)
      description:
        type: string
        maxLength: 200
        pattern: ^[a-zA-Z0-9., ]*$
        description: Description of the certificate (max 200 characters)
      domainIds:
        type: array
        uniqueItems: true
        minItems: 1
        items:
          type: string
          description: IDs of domains associated with this certificate
      provider:
        type: string
        enum: [letsencrypt, self-signed, acme, digicert]
        description: Certificate provider
      owners:
        type: array
        uniqueItems: true
        minItems: 2
        items:
          type: string
          format: email
          description: Email addresses of the namespace owners
      contributors:
        type: array
        uniqueItems: true
        items:
          type: string
          format: email
          description: Email addresses of the namespace contributors
      readers:
        type: array
        uniqueItems: true
        items:
          type: string
          format: email
          description: Email addresses of the namespace readers
  Certificate:
    type: object
    required:
      - id
      - createdAt
      - name
      - description
      - domainIds
      - provider
      - owners
      - contributors
      - readers
    properties:
      id:
        type: string
        maxLength: 24
        minLength: 24
        description: Unique identifier of the certificate
      createdAt:
        type: string
        format: date-time
        description: Timestamp when the certificate was created
      name:
        type: string
        maxLength: 250
        minLength: 3
        pattern: ^[a-z0-9][a-z0-9.-]*[a-z0-9]$
        description: Name of the certificate (3-250 characters, lowercase, hyphen-separated)
      description:
        type: string
        maxLength: 200
        pattern: ^[a-zA-Z0-9., ]*$
        description: Description of the certificate (max 200 characters)
      domainIds:
        type: array
        uniqueItems: true
        minItems: 1
        items:
          type: string
          description: IDs of domains associated with this certificate
      provider:
        type: string
        enum: [letsencrypt, self-signed, acme, digicert]
        description: Certificate provider
      owners:
        type: array
        uniqueItems: true
        minItems: 2
        items:
          type: string
          format: email
          description: Email addresses of the namespace owners
      contributors:
        type: array
        uniqueItems: true
        items:
          type: string
          format: email
          description: Email addresses of the namespace contributors
      readers:
        type: array
        uniqueItems: true
        items:
          type: string
          format: email
          description: Email addresses of the namespace readers
  CreateAcrRepository:
    type: object
    required:
      - repository
      - description
      - scopedMapToken
      - workspace
      - owners
      - contributors
      - readers
    properties:
      repository:
        type: string
        description: The ACR repository name
      description:
        type: string
        maxLength: 200
        pattern: ^[a-zA-Z0-9., ]*$
        description: Description of the ACR Repository (max 200 characters)
      scopedMapToken:
        type: string
        description: Token for ACR access
      workspace:
        type: string
        pattern: ^[a-z0-9-]+ \([a-zA-Z0-9]{24}\)$
        description: Workspace associated with the ACR
      owners:
        type: array
        uniqueItems: true
        minItems: 2
        items:
          type: string
          format: email
          description: Email addresses of the ACR owners
      contributors:
        type: array
        uniqueItems: true
        items:
          type: string
          format: email
          description: Email addresses of the ACR contributors
      readers:
        type: array
        uniqueItems: true
        items:
          type: string
          format: email
          description: Email addresses of the ACR readers
  AcrRepository:
    type: object
    required:
      - id
      - createdAt
      - repository
      - description
      - scopedMapToken
      - workspace
      - owners
      - contributors
      - readers
    properties:
      id:
        type: string
        maxLength: 24
        minLength: 24
        description: Unique identifier of the ACR Repository
      createdAt:
        type: string
        format: date-time
        description: Timestamp when the ACR Repository was created
      repository:
        type: string
        description: The ACR repository name
      description:
        type: string
        maxLength: 200
        pattern: ^[a-zA-Z0-9., ]*$
        description: Description of the ACR Repository (max 200 characters)
      scopedMapToken:
        type: string
        description: Token for ACR access
      workspace:
        type: string
        description: Workspace associated with the ACR Repository
      owners:
        type: array
        uniqueItems: true
        minItems: 2
        items:
          type: string
          format: email
          description: Email addresses of the ACR Repository owners
      contributors:
        type: array
        uniqueItems: true
        items:
          type: string
          format: email
          description: Email addresses of the ACR Repository contributors
      readers:
        type: array
        uniqueItems: true
        items:
          type: string
          format: email
          description: Email addresses of the ACR Repository readers

paths:
  /workspace/v1:
    get:
      summary: Get list of workspace
      description: Returns a list of workspace with their details.
      security:
        Bearer: []
      responses:
        '200':
          description: A JSON array of workspace objects
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: '000000000000000000000000'
                    createdAt:
                      type: string
                      format: date-time
                      example: '2024-05-17T07:37:03.000000342Z'
                    name:
                      type: string
                      example: 'apme'
                    description:
                      type: string
                      example: 'A workspace making everything'
                    owners:
                      type: array
                      items:
                        type: string
                      example:
                        - 'jane.example@abc.technology'
                        - 'john.example@abc.technology'
                    contributors:
                      type: array
                      items:
                        type: string
                      example:
                        - 'maria.example@abc.technology'
                    readers:
                      type: array
                      items:
                        type: string
                      example:
                        - 'markus.example@abc.technology'
              examples:
                workspace-list:
                  summary: First workspace Example
                  value:
                    - id: '000000000000000000000000'
                      createdAt: '2024-05-17T07:37:03.000000342Z'
                      name: 'apme'
                      description: 'A workspace making everything'
                      owners:
                        - 'jane.example@abc.technology'
                        - 'john.example@abc.technology'
                      contributors:
                        - 'maria.example@abc.technology'
                      readers:
                        - 'markus.example@abc.technology'
                    - id: '100000000000000000000001'
                      createdAt: '2024-05-17T07:37:03.000000342Z'
                      name: 'apme-2'
                      description: 'A workspace making everything'
                      owners:
                        - 'jane.example@cariad.technology'
                        - 'john.example@abc.technology'
                      contributors:
                        - 'maria.example@abc.technology'
                      readers:
                        - 'markus.example@abc.technology'
    post:
      operationId: new-workspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkspace'
            examples:
              create-workspace:
                value:
                  name: 'apme'
                  description: 'A workspace making everything'
                  owners:
                    - 'jane.example@abc.technology'
                    - 'john.example@abc.technology'
                  contributors:
                    - 'maria.example@abc.technology'
                    - 'markus.example@abc.technology'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
              examples:
                create-workspace:
                  value: |-
                    {
                      "id": "{{ randomInt(1,9) }}00000000000000000000000",
                      "createdAt": "2024-08-26T07:37:03.000000342Z",
                      "name": "{{ request.body/name }}",
                      "description": "{{ request.body/description }}",
                      "owners": {{ request.body/owners }},
                      "contributors": {{ request.body/contributors }},
                      "readers": {{ request.body/readers }}
                    }
          description: Created
      summary: Create new workspace
      description: create a workspace with their details.
      security:
        Bearer: []
      tags:
        - workspace
  /workspace/v1/{workspaceId}:
    delete:
      operationId: delete-workspace
      parameters:
        - in: path
          name: workspaceId
          required: true
          schema:
            type: string
          examples:
            delete-workspace:
              value: '000000000000000000000000'
      responses:
        204:
          description: Worksapce with specified id has been removed.
          content:
            application/json:
              examples:
                delete-workspace:
                  value: |-
                    {
                      "response": "Worksapce with specified id has been removed.""
                    }
      summary: Delete workspace
      security:
        Bearer: []
      tags:
        - workspace
    put:
      operationId: update-workspace
      parameters:
        - in: path
          name: workspaceId
          required: true
          schema:
            type: string
          examples:
            update-workspace:
              value: '000000000000000000000000'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
            examples:
              update-workspace:
                value:
                  id: '000000000000000000000000'
                  createdAt: '2024-08-26T07:37:03.000000342Z'
                  name: 'apme'
                  description: 'A workspace making everything'
                  owners:
                    - 'jane.example@abc.technology'
                    - 'john.example@abc.technology'
                  contributors:
                    - 'maria.example@abc.technology'
                  readers:
                    - 'markus.example@abc.technology'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
              examples:
                update-workspace:
                  value: |-
                    {
                      "id": "000000000000000000000000",
                      "createdAt": "2024-08-26T07:37:03.000000342Z",
                      "name": "{{ request.body/name }}",
                      "description": "{{ request.body/description }}",
                      "owners": {{ request.body/owners }},
                      "contributors": {{ request.body/contributors }},
                      "readers": {{ request.body/readers }}
                    }
          description: OK
      summary: Update workspace
      security:
        Bearer: []
      tags:
        - workspace
  /namespace/v1:
    get:
      summary: Get list of namespaces
      description: Returns a list of namespaces with their details.
      security:
        - Bearer: []
      responses:
        '200':
          description: A JSON array of namespace objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Namespace'
              examples:
                namespace-list:
                  summary: Namespace List Example
                  value:
                    - id: '000000000000000000000000'
                      createdAt: '2025-02-17T07:37:03.000000342Z'
                      name: 'my-namespace'
                      description: 'This is my namespace'
                      workspace: '5f9f1c5e7b2a4b1c8c3d4e5f'
                      cluster: 'my-cluster'
                      owners:
                        - 'owner1@example.com'
                        - 'owner2@example.com'
                      contributors:
                        - 'contributor1@example.com'
                        - 'contributor2@example.com'
                      readers:
                        - 'reader1@example.com'
                        - 'reader2@example.com'
                    - id: '100000000000000000000001'
                      createdAt: '2025-02-17T07:37:03.000000342Z'
                      name: 'another-namespace'
                      description: 'This is another namespace'
                      workspace: '6f9f1c5e7b2a4b1c8c3d4e5f'
                      cluster: 'another-cluster'
                      owners:
                        - 'owner3@example.com'
                        - 'owner4@example.com'
                      contributors:
                        - 'contributor3@example.com'
                        - 'contributor4@example.com'
                      readers:
                        - 'reader3@example.com'
                        - 'reader4@example.com'
    post:
      operationId: new-namespace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNamespace'
            examples:
              create-namespace:
                value:
                  name: 'my-namespace'
                  description: 'This is my namespace'
                  workspace: '5f9f1c5e7b2a4b1c8c3d4e5f'
                  cluster: 'my-cluster'
                  owners:
                    - 'owner1@example.com'
                    - 'owner2@example.com'
                  contributors:
                    - 'contributor1@example.com'
                    - 'contributor2@example.com'
                  readers:
                    - 'reader1@example.com'
                    - 'reader2@example.com'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
              examples:
                create-namespace:
                  value: |-
                    {
                      "id": "{{ randomInt(1,9) }}00000000000000000000000",
                      "createdAt": "2025-02-16T07:37:03.000000342Z",
                      "name": "{{ request.body/name }}",
                      "description": "{{ request.body/description }}",
                      "workspace": "{{ request.body/workspace }}",
                      "cluster": "{{ request.body/cluster }}",
                      "owners": {{ request.body/owners }},
                      "contributors": {{ request.body/contributors }},
                      "readers": {{ request.body/readers }}
                    }
          description: Created
      summary: Create new namespace
      description: Create a namespace with its details.
      security:
        - Bearer: []
      tags:
        - namespace
  /namespace/v1/{namespaceId}:
    delete:
      operationId: delete-namespace
      parameters:
        - in: path
          name: namespaceId
          required: true
          schema:
            type: string
          examples:
            delete-namespace:
              value: '000000000000000000000000'
      responses:
        '204':
          description: Namespace with specified ID has been removed.
          content:
            application/json:
              examples:
                delete-namespace:
                  value: |-
                    {
                      "response": "Namespace with specified ID has been removed."
                    }
      summary: Delete namespace
      security:
        - Bearer: []
      tags:
        - namespace
    put:
      operationId: update-namespace
      parameters:
        - in: path
          name: namespaceId
          required: true
          schema:
            type: string
          examples:
            update-namespace:
              value: '000000000000000000000000'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Namespace'
            examples:
              update-namespace:
                value:
                  id: '000000000000000000000000'
                  createdAt: '2024-08-26T07:37:03.000000342Z'
                  name: 'my-namespace'
                  description: 'This is my updated namespace'
                  workspace: '5f9f1c5e7b2a4b1c8c3d4e5f'
                  cluster: 'my-cluster'
                  owners:
                    - 'owner1@example.com'
                    - 'owner2@example.com'
                  contributors:
                    - 'contributor1@example.com'
                    - 'contributor2@example.com'
                  readers:
                    - 'reader1@example.com'
                    - 'reader2@example.com'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
              examples:
                update-namespace:
                  value: |-
                    {
                      "id": "000000000000000000000000",
                      "createdAt": "2024-08-26T07:37:03.000000342Z",
                      "name": "{{ request.body/name }}",
                      "description": "{{ request.body/description }}",
                      "workspace": "{{ request.body/workspace }}",
                      "cluster": "{{ request.body/cluster }}",
                      "owners": {{ request.body/owners }},
                      "contributors": {{ request.body/contributors }},
                      "readers": {{ request.body/readers }}
                    }
          description: OK
      summary: Update namespace
      security:
        - Bearer: []
      tags:
        - namespace
  /domain/v1:
    get:
      summary: Get list of domains
      description: Returns a list of domains with their details.
      security:
        - Bearer: []
      responses:
        '200':
          description: A JSON array of domain objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Domain'
              examples:
                domain-list:
                  summary: Domain List Example
                  value:
                    - id: '000000000000000000000000'
                      createdAt: '2024-05-17T07:37:03.000000342Z'
                      name: 'example.com'
                      description: 'Main company domain'
                      workspace: 'main-workspace (5f9f1c5e7b2a4b1c8c3d4e5f)'
                      owners:
                        - 'owner1@example.com'
                        - 'owner2@example.com'
                      contributors:
                        - 'dev1@example.com'
                        - 'dev2@example.com'
                      readers:
                        - 'reader1@example.com'
                    - id: '100000000000000000000001'
                      createdAt: '2024-05-17T07:37:03.000000342Z'
                      name: 'subdomain.example.com'
                      description: 'Subdomain for testing'
                      workspace: 'test-workspace (6f9f1c5e7b2a4b1c8c3d4e5f)'
                      owners:
                        - 'owner3@example.com'
                        - 'owner4@example.com'
                      contributors:
                        - 'dev3@example.com'
                      readers:
                        - 'reader2@example.com'
    post:
      operationId: new-domain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDomain'
            examples:
              create-domain:
                value:
                  name: 'example.com'
                  description: 'Main company domain'
                  workspace: 'main-workspace (5f9f1c5e7b2a4b1c8c3d4e5f)'
                  owners:
                    - 'owner1@example.com'
                    - 'owner2@example.com'
                  contributors:
                    - 'dev1@example.com'
                    - 'dev2@example.com'
                  readers:
                    - 'reader1@example.com'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
              examples:
                create-domain:
                  value: |-
                    {
                      "id": "{{ randomInt(1,9) }}00000000000000000000000",
                      "createdAt": "2024-05-17T07:37:03.000000342Z",
                      "name": "{{ request.body/name }}",
                      "description": "{{ request.body/description }}",
                      "workspace": "{{ request.body/workspace }}",
                      "owners": {{ request.body/owners }},
                      "contributors": {{ request.body/contributors }},
                      "readers": {{ request.body/readers }}
                    }
          description: Created
      summary: Create new domain
      description: Create a domain with its details.
      security:
        - Bearer: []
      tags:
        - domain
  /domain/v1/{domainId}:
    delete:
      operationId: delete-domain
      parameters:
        - in: path
          name: domainId
          required: true
          schema:
            type: string
          examples:
            delete-domain:
              value: '000000000000000000000000'
      responses:
        '204':
          description: Domain with specified ID has been removed.
          content:
            application/json:
              examples:
                delete-domain:
                  value: |-
                    {
                      "response": "Domain with specified ID has been removed."
                    }
      summary: Delete domain
      security:
        - Bearer: []
      tags:
        - domain
    put:
      operationId: update-domain
      parameters:
        - in: path
          name: domainId
          required: true
          schema:
            type: string
          examples:
            update-domain:
              value: '000000000000000000000000'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Domain'
            examples:
              update-domain:
                value:
                  id: '000000000000000000000000'
                  createdAt: '2024-05-17T07:37:03.000000342Z'
                  name: 'example.com'
                  description: 'Updated main company domain'
                  workspace: 'main-workspace (5f9f1c5e7b2a4b1c8c3d4e5f)'
                  owners:
                    - 'owner1@example.com'
                    - 'owner2@example.com'
                  contributors:
                    - 'dev1@example.com'
                    - 'dev2@example.com'
                  readers:
                    - 'reader1@example.com'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
              examples:
                update-domain:
                  value: |-
                    {
                      "id": "000000000000000000000000",
                      "createdAt": "2024-05-17T07:37:03.000000342Z",
                      "name": "{{ request.body/name }}",
                      "description": "{{ request.body/description }}",
                      "workspace": "{{ request.body/workspace }}",
                      "owners": {{ request.body/owners }},
                      "contributors": {{ request.body/contributors }},
                      "readers": {{ request.body/readers }}
                    }
          description: OK
      summary: Update domain
      security:
        - Bearer: []
      tags:
        - domain

  /workspace/{workspaceId}/certificate/v1/{certificateId}:
    delete:
      operationId: delete-certificate
      parameters:
        - in: path
          name: workspaceId
          required: true
          schema:
            type: string
          description: ID of the workspace
          examples:
            delete-certificate:
              value: '6777dabf1928ea1633287b46'
        - in: path
          name: certificateId
          required: true
          schema:
            type: string
          examples:
            delete-certificate:
              value: '000000000000000000000000'
      responses:
        '204':
          description: Certificate with specified ID has been removed.
          content:
            application/json:
              examples:
                delete-certificate:
                  value: |-
                    {
                      "response": "Certificate with specified ID has been removed."
                    }
      summary: Delete certificate
      security:
        - Bearer: []
      tags:
        - certificate
    put:
      operationId: update-certificate
      parameters:
        - in: path
          name: workspaceId
          required: true
          schema:
            type: string
          description: ID of the workspace
          examples:
            update-certificate:
              value: '6777dabf1928ea1633287b46'
        - in: path
          name: certificateId
          required: true
          schema:
            type: string
          examples:
            update-certificate:
              value: '000000000000000000000000'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Certificate'
            examples:
              update-certificate:
                value:
                  id: '000000000000000000000000'
                  createdAt: '2024-05-17T07:37:03.000000342Z'
                  name: 'updated-certificate'
                  description: 'Updated main company certificate'
                  domainIds:
                    - 'domain-id-123'
                    - 'domain-id-789'
                  provider: 'letsencrypt'
                  owners:
                    - 'owner1@example.com'
                    - 'owner2@example.com'
                  contributors:
                    - 'dev1@example.com'
                    - 'dev2@example.com'
                  readers:
                    - 'reader1@example.com'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
              examples:
                update-certificate:
                  value: |-
                    {
                      "id": "000000000000000000000000",
                      "createdAt": "2024-05-17T07:37:03.000000342Z",
                      "name": "{{ request.body/name }}",
                      "description": "{{ request.body/description }}",
                      "domainIds": {{ request.body/domainIds }},
                      "provider": "{{ request.body/provider }}",
                      "owners": {{ request.body/owners }},
                      "contributors": {{ request.body/contributors }},
                      "readers": {{ request.body/readers }}
                    }
          description: OK
      summary: Update certificate
      security:
        - Bearer: []
      tags:
        - certificate
    get:
      summary: Get certificate by ID
      description: Returns a certificate with its details.
      parameters:
        - in: path
          name: workspaceId
          required: true
          schema:
            type: string
          description: ID of the workspace
          examples:
            get-certificate:
              value: '6777dabf1928ea1633287b46'
        - in: path
          name: certificateId
          required: true
          schema:
            type: string
          examples:
            get-certificate:
              value: '000000000000000000000000'
      security:
        - Bearer: []
      responses:
        '200':
          description: A certificate object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
              examples:
                get-certificate:
                  value:
                    id: '000000000000000000000000'
                    createdAt: '2024-05-17T07:37:03.000000342Z'
                    name: 'main-certificate'
                    description: 'Main company certificate'
                    domainIds:
                      - 'domain-id-123'
                      - 'domain-id-456'
                    provider: 'letsencrypt'
                    owners:
                      - 'owner1@example.com'
                      - 'owner2@example.com'
                    contributors:
                      - 'dev1@example.com'
                      - 'dev2@example.com'
                    readers:
                      - 'reader1@example.com'
  /workspace/{workspaceId}/certificate/v1:
    get:
      summary: Get list of certificates for a workspace
      description: Returns a list of certificates with their details for a specific workspace.
      parameters:
        - in: path
          name: workspaceId
          required: true
          schema:
            type: string
          description: ID of the workspace
          examples:
            get-certificate:
              value: '06777dabf1928ea1633287b46'
      security:
        - Bearer: []
      responses:
        '200':
          description: A list of certificates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Certificate'
              examples:
                get-certificate:
                  value:
                    - id: '000000000000000000000000'
                      createdAt: '2024-05-17T07:37:03.000000342Z'
                      name: 'main-certificate'
                      description: 'Main company certificate'
                      domainIds:
                        - 'domain-id-123'
                        - 'domain-id-456'
                      provider: 'letsencrypt'
                      owners:
                        - 'owner1@example.com'
                        - 'owner2@example.com'
                      contributors:
                        - 'dev1@example.com'
                        - 'dev2@example.com'
                      readers:
                        - 'reader1@example.com'
                    - id: '000000000000000000000001'
                      createdAt: '2024-05-17T07:37:03.000000342Z'
                      name: 'main-certificate'
                      domainIds:
                        - 'domain-id-123'
                        - 'domain-id-456'
                      provider: 'letsencrypt'
                      owners:
                        - 'owner1@example.com'
                        - 'owner2@example.com'
                      contributors:
                        - 'dev1@example.com'
                        - 'dev2@example.com'
                      readers:
                        - 'reader1@example.com'

    post:
      operationId: create-certificate-simple
      summary: Create certificate (alternative)
      description: Alternative endpoint to create a certificate
      parameters:
        - in: path
          name: workspaceId
          required: true
          schema:
            type: string
          description: ID of the workspace
          examples:
            create-certificate-simple:
              value: '6777dabf1928ea1633287b46'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCertificate'
            examples:
              create-certificate-simple:
                value:
                  name: 'simple-certificate'
                  description: 'Simple certificate example'
                  domainIds:
                    - 'domain-id-123'
                    - 'domain-id-456'
                  provider: 'letsencrypt'
                  owners:
                    - 'owner1@example.com'
                    - 'owner2@example.com'
                  contributors:
                    - 'dev1@example.com'
                    - 'dev2@example.com'
                  readers:
                    - 'reader1@example.com'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
              examples:
                create-certificate-simple:
                  value: |-
                    {
                      "id": "{{ randomInt(1,9) }}00000000000000000000000",
                      "createdAt": "2025-03-17T07:37:03.000000342Z",
                      "name": "{{ request.body/name }}",
                      "description": "{{ request.body/description }}",
                      "domainIds": {{ request.body/domainIds }},
                      "provider": "{{ request.body/provider }}",
                      "owners": {{ request.body/owners }},
                      "contributors": {{ request.body/contributors }},
                      "readers": {{ request.body/readers }}
                    }
      security:
        - Bearer: []
      tags:
        - certificate

  /acrRepo/v1:
    get:
      summary: Get list of ACR Repositories
      description: Returns a list of ACR Repositories with their details.
      security:
        - Bearer: []
      responses:
        '200':
          description: A JSON array of ACR Repository objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AcrRepo'
              examples:
                acr-repo-list:
                  summary: ACR Repository List Example
                  value:
                    - id: '000000000000000000000000'
                      createdAt: '2024-05-17T07:37:03.000000342Z'
                      repository: 'myapp/frontend'
                      description: 'Frontend application container registry'
                      scopedMapToken: 'token-12345'
                      workspace: 'main-workspace (5f9f1c5e7b2a4b1c8c3d4e5f)'
                      owners:
                        - 'owner1@example.com'
                        - 'owner2@example.com'
                      contributors:
                        - 'contributor1@example.com'
                        - 'contributor2@example.com'
                      readers:
                        - 'reader1@example.com'
                    - id: '100000000000000000000001'
                      createdAt: '2024-05-17T07:37:03.000000342Z'
                      repository: 'myapp/backend'
                      description: 'Backend application container registry'
                      scopedMapToken: 'token-67890'
                      workspace: 'test-workspace (6f9f1c5e7b2a4b1c8c3d4e5f)'
                      owners:
                        - 'owner3@example.com'
                        - 'owner4@example.com'
                      contributors:
                        - 'contributor3@example.com'
                      readers:
                        - 'reader2@example.com'
    post:
      operationId: new-acr-repo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAcrRepository'
            examples:
              create-acr-repo:
                value:
                  repository: 'myapp/frontend'
                  description: 'Frontend application container registry'
                  scopedMapToken: 'token-12345'
                  workspace: 'main-workspace (5f9f1c5e7b2a4b1c8c3d4e5f)'
                  owners:
                    - 'owner1@example.com'
                    - 'owner2@example.com'
                  contributors:
                    - 'contributor1@example.com'
                    - 'contributor2@example.com'
                  readers:
                    - 'reader1@example.com'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcrRepository'
              examples:
                create-acr-repo:
                  value: |-
                    {
                      "id": "{{ randomInt(1,9) }}00000000000000000000000",
                      "createdAt": "2024-05-17T07:37:03.000000342Z",
                      "repository": "{{ request.body/repository }}",
                      "description": "{{ request.body/description }}",
                      "scopedMapToken": "{{ request.body/scopedMapToken }}",
                      "workspace": "{{ request.body/workspace }}",
                      "owners": {{ request.body/owners }},
                      "contributors": {{ request.body/contributors }},
                      "readers": {{ request.body/readers }}
                    }
          description: Created
      summary: Create new ACR Repository
      description: Create an ACR Repository with its details.
      security:
        - Bearer: []
      tags:
        - acr
  /acrRepo/v1/{acrRepoId}:
    delete:
      operationId: delete-acr-repo
      parameters:
        - in: path
          name: acrRepoId
          required: true
          schema:
            type: string
          examples:
            delete-acr-repo:
              value: '000000000000000000000000'
      responses:
        '204':
          description: ACR Repository with specified ID has been removed.
          content:
            application/json:
              examples:
                delete-acr-repo:
                  value: |-
                    {
                      "response": "ACR Repository with specified ID has been removed."
                    }
      summary: Delete ACR Repository
      security:
        - Bearer: []
      tags:
        - acr
    put:
      operationId: update-acr-repo
      parameters:
        - in: path
          name: acrRepoId
          required: true
          schema:
            type: string
          examples:
            update-acr-repo:
              value: '000000000000000000000000'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcrRepository'
            examples:
              update-acr-repo:
                value:
                  id: '000000000000000000000000'
                  createdAt: '2024-05-17T07:37:03.000000342Z'
                  repository: 'myapp/updated'
                  description: 'Updated container registry for the application'
                  scopedMapToken: 'updated-token-12345'
                  workspace: 'main-workspace (5f9f1c5e7b2a4b1c8c3d4e5f)'
                  owners:
                    - 'owner1@example.com'
                    - 'owner2@example.com'
                  contributors:
                    - 'contributor1@example.com'
                    - 'contributor2@example.com'
                  readers:
                    - 'reader1@example.com'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcrRepository'
              examples:
                update-acr-repo:
                  value: |-
                    {
                      "id": "000000000000000000000000",
                      "createdAt": "2024-05-17T07:37:03.000000342Z",
                      "repository": "{{ request.body/repository }}",
                      "description": "{{ request.body/description }}",
                      "scopedMapToken": "{{ request.body/scopedMapToken }}",
                      "workspace": "{{ request.body/workspace }}",
                      "owners": {{ request.body/owners }},
                      "contributors": {{ request.body/contributors }},
                      "readers": {{ request.body/readers }}
                    }
          description: OK
      summary: Update ACR Repository
      security:
        - Bearer: []
      tags:
        - acr
    get:
      summary: Get ACR Repository by ID
      description: Returns an ACR Repository with its details.
      parameters:
        - in: path
          name: acrRepoId
          required: true
          schema:
            type: string
          examples:
            get-acr-repo:
              value: '000000000000000000000000'
      security:
        - Bearer: []
      responses:
        '200':
          description: An ACR Repository object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcrRepository'
              examples:
                get-acr-repo:
                  value:
                    id: '000000000000000000000000'
                    createdAt: '2024-05-17T07:37:03.000000342Z'
                    repository: 'myapp/frontend'
                    description: 'Frontend application container registry'
                    scopedMapToken: 'token-12345'
                    workspace: 'main-workspace (5f9f1c5e7b2a4b1c8c3d4e5f)'
                    owners:
                      - 'owner1@example.com'
                      - 'owner2@example.com'
                    contributors:
                      - 'contributor1@example.com'
                      - 'contributor2@example.com'
                    readers:
                      - 'reader1@example.com'
